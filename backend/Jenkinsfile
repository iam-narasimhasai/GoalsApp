pipeline {
    agent any
    tools {
        nodejs 'nodejs-18-20-6'
    }
    environment {
        MONGOURI = "mongodb+srv://cluster0.awxhn.mongodb.net/retryWrites=true&w=majority"
        MONGO_USER = "sai"
        MONGO_PASSWORD = "secret32412"
        PORT = 2121
        GIT_TOKEN = credentials('githubtoken')
        APP_URL = "http://aed3d6133e593405abb3e439e57eeb5a-1237728390.ap-south-1.elb.amazonaws.com/goals"
    }

    options {
        disableResume()
        disableConcurrentBuilds(abortPrevious: true)
    }

    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'pre-prod', url: 'https://github.com/iam-narasimhasai/GoalsApp'
            }
        }

        stage('Installing Dependencies') {
            options { timestamps() }
            steps {
                sh '''
                    cd backend
                    npm install
                '''
            }
        }

        stage('Run Unit Testing') {
            options { retry(3) }
            steps {
                sh '''
                    cd backend
                    npm run test
                '''
            }
        }

        stage('Code Coverage') {
            steps {
                catchError(message: 'Oops! it will be fixed in future', stageResult: 'UNSTABLE') {
                    sh '''
                        cd backend
                        npm run coverage
                    '''
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                sh '''
                    cd backend/
                    docker build -t narasimhasai95/goalsapi:${GIT_COMMIT} .
                '''
            }
        }

        stage('Trivy Docker Image Scan') {
            steps {
                sh '''
                    mkdir -p trivy-report
                    trivy image --severity CRITICAL,HIGH,MEDIUM --format template --template "@/var/lib/jenkins/html.tpl" -o trivy-report/vulnerability-report.html narasimhasai95/goalsapi:${GIT_COMMIT}
                '''
            }
        }

        stage('Push Docker Image') {
            steps {
                withDockerRegistry(credentialsId: 'docker-creds', url: "") {
                    sh 'docker push narasimhasai95/goalsapi:${GIT_COMMIT}'
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                sh 'git clone -b main https://github.com/iam-narasimhasai/GoalsApp_Manifest'
                dir("GoalsApp_Manifest") {
                    sh '''
                        git checkout main
                        sed -i "s#narasimhasai95.*#narasimhasai95/goalsapi:${GIT_COMMIT}#g" deploy-backend.yaml

                        cat deploy-backend.yaml
                        
                        git config --global user.email "narasimhasai.nimmagadda@gmail.com"
                        git remote set-url origin https://$GIT_TOKEN@github.com/iam-narasimhasai/GoalsApp_Manifest
                        git add .
                        git commit -am "Updated the docker image"
                        git push -u origin main
                    '''
                }
            }
        }

        stage('App Deployed?') {
            steps {
                timeout(time: 5, unit: 'MINUTES') {
                    input message: 'Is ArgoCD Synced?', ok: 'Yes'
                }
            }
        }

        stage('DAST - OWASP ZAP') {
            steps {
                sh '''
                    chmod 777 $(pwd)
                    docker run --rm -v $(pwd):/zap/wrk/:rw \
                    -v /var/lib/jenkins/workspace/backend/zap_ignore_rules:/zap/wrk/zap_ignore_rules \
                    ghcr.io/zaproxy/zaproxy:stable zap-baseline.py \
                    -t $APP_URL \
                    -r zap_report.html \
                    -w zap_report.md \
                    -J zap_json_report.json \
                    -x zap_xml_report.xml \
                    -z "-config scanner.alertFilters.ignoreIds=10021,10037,10049,10055,10063,10098"
                '''
            }
        }
    }

    post {
        always {
            script {
                if (fileExists('GoalsApp_Manifest')) {
                    sh 'rm -rf GoalsApp_Manifest'
                }
            }

            junit allowEmptyResults: true, testResults: 'backend/test-results.xml'

            publishHTML([
                allowMissing: true,
                alwaysLinkToLastBuild: true,
                keepAll: true,
                reportDir: 'backend/coverage/lcov-report',
                reportFiles: 'index.html',
                reportName: 'Code Coverage HTML Report',
                useWrapperFileDirectly: true
            ])
            publishHTML([
                allowMissing: true,
                alwaysLinkToLastBuild: true,
                keepAll: true,
                reportDir: '.',
                reportFiles: 'zap_report.html',
                reportName: 'OWASP ZAP DAST Report',
                useWrapperFileDirectly: true
            ])   

            publishHTML([
                allowMissing: true,
                alwaysLinkToLastBuild: true,
                keepAll: true,
                reportDir: 'trivy-report',
                reportFiles: 'vulnerability-report.html',
                reportName: 'Trivy Vulnerability Report',
                useWrapperFileDirectly: true
            ])
        }
    }
}
